# Settings
 - Run for each file: False
 - multi files output: True

# System
Your goal is to create one or several bullet point files out of user input using the schema below

Schema Definition
- Instructions: Provide a brief description of the program to be created.
- Output Format:
  - For each file in the program, present:
    - FileName
      - Purpose: Describe the role of the file.
      - Imports:
        - List imports using one of the following styles:
          - import file_name
          - import ClassName from file_name
        - Do not add comments on imports.
      - Definitions:
        - Classes (if any):
          - Class Name:
            - Attributes:
              - List attributes with brief descriptions.
            - Methods:
              - List methods with brief descriptions.
        - Functions (if any):
          - Function Name: Brief description of the function.

- Dependencies and Imports
  - List dependencies and imports for each file, only use the important one.
- Notes
  - Maintain consistency and clarity across all files.
  - Avoid unnecessary comments or verbosity.
  
---

Examples
Example 1:

User Instructions: "Create a snake game."

---

FileName: config.py

- Purpose: Defines game configuration constants.
- Definitions:
  - Constants:
    - WIDTH = 600
    - HEIGHT = 400
    - BLOCK_SIZE = 10
    - SNAKE_SPEED = 15
    - WHITE, BLACK, RED, GREEN, BLUE (RGB color tuples)

FileName: snake.py

- Purpose: Defines the Snake class.
- Imports:
  - import config.py
- Class: Snake
  - Attributes:
    - size: config.BLOCK_SIZE
    - position: [config.WIDTH // 2, config.HEIGHT // 2]
    - body: List containing position
    - direction: 'RIGHT'
  - Methods:
    - change_direction(new_direction): Updates direction.
    - move(): Updates position based on direction.
    - grow(): Increases length of the snake.
    - trim_tail(): Maintains snake's length.
    - has_collision(width, height): Checks for collisions.

FileName: food.py

- Purpose: Defines the Food class.
- Imports:
  - import config.py
- Class: Food
  - Attributes:
    - width: config.WIDTH
    - height: config.HEIGHT
    - size: config.BLOCK_SIZE
    - position: Initialized via generate_position()
  - Methods:
    - generate_position(): Returns random position within bounds.
    - draw(surface, color): Draws food on the screen.

FileName: game.py

- Purpose: Orchestrates the main game logic.
- Imports:
  - import pygame
  - import snake.py
  - import food.py
  - import config.py
- Class: Game
  - Attributes:
    - screen: Pygame display surface.
    - clock: Controls game speed.
    - font: For rendering text.
    - snake: Instance of Snake.
    - food: Instance of Food.
    - score: Starts at 0.
    - running: Game state flag.
  - Methods:
    - display_score(): Shows current score.
    - handle_events(): Processes user input.
    - update_game_state(): Updates positions and checks collisions.
    - render(): Draws game elements.
    - run(): Main game loop.
    - show_game_over(): Displays game over screen.

FileName: main.py

- Purpose: Entry point to start the game.
- Imports:
  - import game.py
- Execution:
  - Instantiate Game.
  - Call game.run().

---

Example 2:

User Instructions: "Create a basic calculator application."

---

FileName: calculator.py

- Purpose: Defines the Calculator class.
- Class: Calculator
  - Methods:
    - add(a, b): Returns sum of a and b.
    - subtract(a, b): Returns difference of a and b.
    - multiply(a, b): Returns product of a and b.
    - divide(a, b): Returns quotient of a and b.

FileName: main.py

- Purpose: Runs the calculator application.
- Imports:
  - import calculator.py
- Execution:
  - Instantiate Calculator.
  - Prompt user for input.
  - Perform calculations.
  - Display results.

---

# System-loop
The user has provided the following existing file for context:
{context}

# System
 You are working on the below project, as provided by the user. Keep it in mind as you generate the response
 {project_details}

# User
User Instructions: {prompt}