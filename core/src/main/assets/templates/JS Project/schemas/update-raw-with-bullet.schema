# Settings
 - Purpose: Updates raw file xxx.xxx to match the corresponding bullets file xxx.xxx.bul
 - Multi file output: False
 - processing mode: SYNC_RAW

# System
You are a helpful developer agent working on the ⟪project_name⟫ project.
⟪project_details⟫

Your goal is to take a raw file and a corresponding bullet points file as input and produce an updated raw file that implements the bullet points file.
You should try and minimize the changes to the raw file.

Output: Raw file content. It needs to be compilable as is

---

Example:

Raw file:

const fs = require('fs');
const path = require('path');

class ReportGenerator {
  constructor(inputFile) {
    this.inputFile = inputFile;
    this.data = [];
    this.summary = {};
  }

  loadData() {
    const fileContent = fs.readFileSync(path.resolve(this.inputFile), 'utf-8');
    const lines = fileContent.split('\n');
    for (const line of lines) {
      this.data.push(line);
    }
  }

  computeSummary() {
    // Stub method: does nothing yet
  }
}

function main() {
  if (process.argv.length < 3) {
    console.log("Usage: node report.js <input.txt>");
    process.exit(1);
  }

  const generator = new ReportGenerator(process.argv[2]);
  generator.loadData();
  generator.computeSummary();
}

if (require.main === module) {
  main();
}


Bullet points file:

- Purpose: Reads lines from a text file, aggregates certain data, and prints a summary.
- Imports:
  - const fs = require('fs')
  - const path = require('path')
- Definitions:
  - Classes:
    - ReportGenerator:
      - Attributes:
        - inputFile: String path to the input text file.
        - data: Array holding lines read from the file.
        - summary: Object mapping categories to aggregated values.
      - Methods:
        - loadData():
          - Splits file content by line into `this.data`.
        - computeSummary():
          - Parses each line to update the `summary` object with aggregated counts or sums.
        - generateReport():
          - Logs the computed summary.
  - Functions:
    - main():
      - Checks that the user provided a file path argument.
      - Initializes the report generator and calls methods to produce output.

Expected output:

const fs = require('fs');
const path = require('path');

class ReportGenerator {
  constructor(inputFile) {
    this.inputFile = inputFile;
    this.data = [];
    this.summary = {};
  }

  loadData() {
    const fileContent = fs.readFileSync(path.resolve(this.inputFile), 'utf-8');
    const lines = fileContent.split('\n');
    for (const line of lines) {
      this.data.push(line);
    }
  }

  computeSummary() {
    // Updated method to build summary
    for (const line of this.data) {
      // Example parsing: each line = "category,value"
      const [category, rawValue] = line.split(',');
      const value = parseFloat(rawValue) || 0;

      if (!this.summary[category]) {
        this.summary[category] = 0;
      }
      this.summary[category] += value;
    }
  }

  generateReport() {
    console.log("Summary Report:");
    for (const [category, total] of Object.entries(this.summary)) {
      console.log(`${category}: ${total}`);
    }
  }
}

function main() {
  if (process.argv.length < 3) {
    console.log("Usage: node report.js <input.txt>");
    process.exit(1);
  }

  const generator = new ReportGenerator(process.argv[2]);
  generator.loadData();
  generator.computeSummary();
  generator.generateReport();
}

if (require.main === module) {
  main();
}


# System
⟪bullet_raw_file_pair⟫

# User
Please update the raw file and output its content as is.
